{"version":3,"file":"mypage-vGjk3qun.js","sources":["../../src/pages/mypage.html?html-proxy&index=0.js","../../src/js/mypage.js"],"sourcesContent":["\n        import { checkAuth } from '../js/auth/auth-check.js';\n        import { setupNavigation, updateNavigation } from '../js/utils/navigation.js';\n        import { initializeStorage } from '../services/local-storage.js';\n\n        async function init() {\n            const user = await checkAuth();\n            if (!user) {\n                window.location.href = '/src/pages/auth.html';\n                return;\n            }\n            \n            initializeStorage();\n            setupNavigation();\n            updateNavigation();\n        }\n\n        init();\n    ","import { checkAuth } from './auth/auth-check.js';\nimport { setupNavigation, updateNavigation } from './utils/navigation.js';\nimport { getUserProfile, getUserNFTs, getTransactions, updateProfile, fetchProducts, fetchChannels } from '../services/local-storage.js';\nimport { connectMetaMask } from './auth/web3-auth.js';\n\nasync function loadUserProfile() {\n    try {\n        const profile = await getUserProfile();\n        if (!profile) return;\n\n        // プロフィール情報の更新\n        const profileElements = {\n            name: document.getElementById('profileName'),\n            email: document.getElementById('profileEmail'),\n            points: document.getElementById('userPoints'),\n            avatar: document.getElementById('profileAvatar')\n        };\n\n        if (profileElements.name) profileElements.name.textContent = profile.username || 'ユーザー名未設定';\n        if (profileElements.email) profileElements.email.textContent = profile.email;\n        if (profileElements.points) profileElements.points.textContent = profile.points.toLocaleString();\n        if (profileElements.avatar) {\n            profileElements.avatar.src = profile.avatar_url || 'https://api.dicebear.com/7.x/avataaars/svg?seed=default';\n        }\n\n        // MetaMask連携状態の更新\n        const connectMetamaskBtn = document.getElementById('connectMetamaskBtn');\n        if (connectMetamaskBtn) {\n            if (profile.wallet_address) {\n                connectMetamaskBtn.textContent = 'MetaMask連携済み';\n                connectMetamaskBtn.disabled = true;\n            } else {\n                connectMetamaskBtn.addEventListener('click', handleMetaMaskConnect);\n            }\n        }\n    } catch (error) {\n        console.error('Error loading profile:', error);\n    }\n}\n\n// アバター画像のアップロード処理\nfunction setupAvatarUpload() {\n    const profileAvatar = document.getElementById('profileAvatar');\n    const avatarInput = document.getElementById('avatarInput');\n    const editAvatarModal = document.getElementById('editAvatarModal');\n    const closeAvatarBtn = editAvatarModal.querySelector('.close-btn');\n    const avatarPreview = document.getElementById('avatarPreview');\n    const saveAvatarBtn = document.getElementById('saveAvatarBtn');\n\n    // プロフィール画像クリックでモーダルを開く\n    profileAvatar?.addEventListener('click', () => {\n        editAvatarModal.style.display = 'block';\n    });\n\n    closeAvatarBtn?.addEventListener('click', () => {\n        editAvatarModal.style.display = 'none';\n        avatarPreview.src = '';\n        avatarInput.value = '';\n    });\n\n    avatarInput?.addEventListener('change', (e) => {\n        const file = e.target.files[0];\n        if (file) {\n            if (file.size > 5 * 1024 * 1024) { // 5MB制限\n                alert('画像サイズは5MB以下にしてください。');\n                avatarInput.value = '';\n                return;\n            }\n\n            if (!file.type.startsWith('image/')) {\n                alert('画像ファイルを選択してください。');\n                avatarInput.value = '';\n                return;\n            }\n\n            const reader = new FileReader();\n            reader.onload = (event) => {\n                avatarPreview.src = event.target.result;\n                saveAvatarBtn.disabled = false;\n            };\n            reader.readAsDataURL(file);\n        }\n    });\n\n    saveAvatarBtn?.addEventListener('click', async () => {\n        const file = avatarInput.files[0];\n        if (!file) return;\n\n        try {\n            const base64Image = avatarPreview.src;\n            await updateProfile({ avatar_url: base64Image });\n            \n            // プロフィールアバターを更新\n            if (profileAvatar) {\n                profileAvatar.src = base64Image;\n            }\n\n            editAvatarModal.style.display = 'none';\n            avatarInput.value = '';\n            saveAvatarBtn.disabled = true;\n        } catch (error) {\n            console.error('Error updating avatar:', error);\n            alert('アバターの更新に失敗しました。');\n        }\n    });\n}\n\nasync function loadUserNFTs() {\n    try {\n        const nfts = await getUserNFTs();\n        const nftGrid = document.getElementById('nftGrid');\n        if (!nftGrid) return;\n\n        if (nfts && nfts.length > 0) {\n            nftGrid.innerHTML = nfts.map(nft => `\n                <div class=\"nft-card\">\n                    <img src=\"${nft.products.image_url}\" alt=\"${nft.products.name}\" class=\"nft-image\">\n                    <div class=\"nft-info\">\n                        <h3 class=\"nft-name\">${nft.products.name}</h3>\n                        <p class=\"nft-date\">購入日: ${new Date(nft.purchased_at).toLocaleDateString()}</p>\n                    </div>\n                </div>\n            `).join('');\n        } else {\n            nftGrid.innerHTML = '<p class=\"no-data\">所有しているNFTはありません</p>';\n        }\n    } catch (error) {\n        console.error('Error loading NFTs:', error);\n        const nftGrid = document.getElementById('nftGrid');\n        if (nftGrid) {\n            nftGrid.innerHTML = '<p class=\"error-message\">NFTの読み込みに失敗しました</p>';\n        }\n    }\n}\n\nasync function loadLikedNFTs() {\n    try {\n        const products = await fetchProducts();\n        const likedNftGrid = document.getElementById('likedNftGrid');\n        if (!likedNftGrid) return;\n\n        const likedNFTs = products.filter(product => \n            localStorage.getItem(`like_${product.id}`) === 'true'\n        );\n\n        if (likedNFTs.length > 0) {\n            likedNftGrid.innerHTML = likedNFTs.map(nft => `\n                <div class=\"nft-card\" onclick=\"window.location.href='/src/pages/product-detail.html?id=${nft.id}'\">\n                    <img src=\"${nft.image_url}\" alt=\"${nft.name}\" class=\"nft-image\">\n                    <div class=\"nft-info\">\n                        <h3 class=\"nft-name\">${nft.name}</h3>\n                        <p class=\"nft-location\">📍 ${nft.location}</p>\n                        <p class=\"nft-price\">¥${nft.price.toLocaleString()}</p>\n                    </div>\n                </div>\n            `).join('');\n        } else {\n            likedNftGrid.innerHTML = '<p class=\"no-data\">いいねしたNFTはありません</p>';\n        }\n    } catch (error) {\n        console.error('Error loading liked NFTs:', error);\n        const likedNftGrid = document.getElementById('likedNftGrid');\n        if (likedNftGrid) {\n            likedNftGrid.innerHTML = '<p class=\"error-message\">いいねしたNFTの読み込みに失敗しました</p>';\n        }\n    }\n}\n\nasync function loadFollowedChannels() {\n    try {\n        const channels = await fetchChannels();\n        const followedChannelsContainer = document.getElementById('followedChannels');\n        if (!followedChannelsContainer) return;\n\n        const followedChannels = channels.filter(channel =>\n            localStorage.getItem(`follow_${channel.id}`) === 'true'\n        );\n\n        if (followedChannels.length > 0) {\n            followedChannelsContainer.innerHTML = followedChannels.map(channel => `\n                <div class=\"followed-channel-card\" onclick=\"window.location.href='/src/pages/market.html?channel=${channel.id}'\">\n                    <img src=\"${channel.image_url}\" alt=\"${channel.name}\" class=\"channel-image\">\n                    <div class=\"channel-info\">\n                        <h3 class=\"channel-name\">${channel.name}</h3>\n                        <p class=\"channel-location\">📍 ${channel.location}</p>\n                        <p class=\"channel-description\">${channel.description}</p>\n                        <div class=\"channel-stats\">\n                            <span class=\"stat-item\">❤️ ${channel.likes.toLocaleString()}</span>\n                            <span class=\"stat-item\">🌾 ${channel.farming_style}</span>\n                        </div>\n                    </div>\n                </div>\n            `).join('');\n        } else {\n            followedChannelsContainer.innerHTML = '<p class=\"no-data\">フォロー中の生産者はいません</p>';\n        }\n    } catch (error) {\n        console.error('Error loading followed channels:', error);\n        const followedChannelsContainer = document.getElementById('followedChannels');\n        if (followedChannelsContainer) {\n            followedChannelsContainer.innerHTML = '<p class=\"error-message\">フォロー中の生産者の読み込みに失敗しました</p>';\n        }\n    }\n}\n\nasync function loadTransactionHistory() {\n    try {\n        const transactions = await getTransactions();\n        const historyList = document.getElementById('historyList');\n        if (!historyList) return;\n\n        if (transactions && transactions.length > 0) {\n            historyList.innerHTML = transactions.map(tx => `\n                <div class=\"history-item\">\n                    <div class=\"history-details\">\n                        <h3 class=\"history-title\">${tx.description}</h3>\n                        <p class=\"history-date\">${new Date(tx.created_at).toLocaleString()}</p>\n                    </div>\n                    <div class=\"history-amount ${tx.type === 'point' ? 'points' : 'money'}\">\n                        ${tx.type === 'point' ? '🏆' : '💰'} ${tx.amount.toLocaleString()}\n                    </div>\n                </div>\n            `).join('');\n        } else {\n            historyList.innerHTML = '<p class=\"no-data\">取引履歴はありません</p>';\n        }\n    } catch (error) {\n        console.error('Error loading transactions:', error);\n        const historyList = document.getElementById('historyList');\n        if (historyList) {\n            historyList.innerHTML = '<p class=\"error-message\">取引履歴の読み込みに失敗しました</p>';\n        }\n    }\n}\n\nfunction setupProfileEditing() {\n    const editNameBtn = document.getElementById('editNameBtn');\n    const editProfileModal = document.getElementById('editProfileModal');\n    const editProfileForm = document.getElementById('editProfileForm');\n    const closeBtn = editProfileModal.querySelector('.close-btn');\n\n    editNameBtn?.addEventListener('click', () => {\n        const currentName = document.getElementById('profileName').textContent;\n        document.getElementById('editUsername').value = currentName;\n        editProfileModal.style.display = 'block';\n    });\n\n    closeBtn?.addEventListener('click', () => {\n        editProfileModal.style.display = 'none';\n    });\n\n    editProfileForm?.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const newUsername = document.getElementById('editUsername').value;\n        \n        try {\n            await updateProfile({ username: newUsername });\n            await loadUserProfile();\n            editProfileModal.style.display = 'none';\n        } catch (error) {\n            console.error('Error updating profile:', error);\n            alert('プロフィールの更新に失敗しました。');\n        }\n    });\n}\n\nasync function handleMetaMaskConnect() {\n    try {\n        await connectMetaMask();\n        await loadUserProfile();\n    } catch (error) {\n        console.error('MetaMask connection error:', error);\n        alert('MetaMaskとの連携に失敗しました。');\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n    try {\n        await Promise.all([\n            loadUserProfile(),\n            loadUserNFTs(),\n            loadLikedNFTs(),\n            loadFollowedChannels(),\n            loadTransactionHistory()\n        ]);\n        setupProfileEditing();\n        setupAvatarUpload();\n    } catch (error) {\n        console.error('Error initializing mypage:', error);\n    }\n});"],"names":["init","checkAuth","initializeStorage","setupNavigation","updateNavigation","loadUserProfile","profile","getUserProfile","profileElements","connectMetamaskBtn","handleMetaMaskConnect","error","setupAvatarUpload","profileAvatar","avatarInput","editAvatarModal","closeAvatarBtn","avatarPreview","saveAvatarBtn","e","file","reader","event","base64Image","updateProfile","loadUserNFTs","nfts","getUserNFTs","nftGrid","nft","loadLikedNFTs","products","fetchProducts","likedNftGrid","likedNFTs","product","loadFollowedChannels","channels","fetchChannels","followedChannelsContainer","followedChannels","channel","loadTransactionHistory","transactions","getTransactions","historyList","tx","setupProfileEditing","editNameBtn","editProfileModal","editProfileForm","closeBtn","currentName","newUsername","connectMetaMask"],"mappings":"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"}