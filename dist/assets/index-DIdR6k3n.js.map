{"version":3,"file":"index-DIdR6k3n.js","sources":["../../src/services/local-storage.js","../../src/js/auth/auth-check.js","../../src/js/utils/navigation.js","../../index.html?html-proxy&index=0.js","../../src/js/script.js"],"sourcesContent":["// ローカルストレージのキー\nconst STORAGE_KEYS = {\n    USERS: 'users',\n    PROFILES: 'profiles',\n    PRODUCTS: 'products',\n    CHANNELS: 'channels',\n    USER_NFTS: 'user_nfts',\n    TRANSACTIONS: 'transactions',\n    PURCHASED_NFTS: 'purchased_nfts'\n};\n\n// 初期データ\nconst initialData = {\n    products: [\n        // 山田農園のNFT\n        {\n            id: '1',\n            name: '朝採れ野菜セットNFT',\n            location: '長野県',\n            price: 50000,\n            rating: 4.8,\n            sales: 120,\n            image_url: 'https://api.dicebear.com/7.x/shapes/svg?seed=vegetables1',\n            description: '山田農園で朝採れた新鮮な季節の野菜をデジタルアートで表現。',\n            channel_id: '1',\n            sold: false\n        },\n        {\n            id: '2',\n            name: '有機りんごNFT',\n            location: '長野県',\n            price: 75000,\n            rating: 4.5,\n            sales: 85,\n            image_url: 'https://api.dicebear.com/7.x/shapes/svg?seed=apple1',\n            description: '無農薬で育てた蜜入りりんごの収穫の瞬間を切り取ったアート作品。',\n            channel_id: '1',\n            sold: false\n        },\n        {\n            id: '3',\n            name: '山田農園の四季NFT',\n            location: '長野県',\n            price: 45000,\n            rating: 4.7,\n            sales: 150,\n            image_url: 'https://api.dicebear.com/7.x/shapes/svg?seed=seasons1',\n            description: '一年を通じて変化する農園の風景を四季折々で表現。',\n            channel_id: '1',\n            sold: false\n        },\n        {\n            id: '4',\n            name: '伝統野菜の物語NFT',\n            location: '長野県',\n            price: 60000,\n            rating: 4.6,\n            sales: 95,\n            image_url: 'https://api.dicebear.com/7.x/shapes/svg?seed=traditional1',\n            description: '代々受け継がれてきた伝統野菜の栽培方法と歴史を表現。',\n            channel_id: '1',\n            sold: false\n        },\n        // 海辺の牧場のNFT\n        {\n            id: '5',\n            name: '朝焼けの牧場NFT',\n            location: '千葉県',\n            price: 55000,\n            rating: 4.7,\n            sales: 110,\n            image_url: 'https://api.dicebear.com/7.x/shapes/svg?seed=sunrise1',\n            description: '海辺の牧場で撮影された美しい朝焼けの風景。',\n            channel_id: '2',\n            sold: false\n        },\n        {\n            id: '6',\n            name: 'ジャージー牛の一日NFT',\n            location: '千葉県',\n            price: 70000,\n            rating: 4.6,\n            sales: 80,\n            image_url: 'https://api.dicebear.com/7.x/shapes/svg?seed=jersey1',\n            description: '牧場のジャージー牛たちの日常を切り取った作品。',\n            channel_id: '2',\n            sold: false\n        },\n        {\n            id: '7',\n            name: '海風と緑のハーモニーNFT',\n            location: '千葉県',\n            price: 48000,\n            rating: 4.8,\n            sales: 130,\n            image_url: 'https://api.dicebear.com/7.x/shapes/svg?seed=harmony1',\n            description: '潮風に揺れる牧草地の美しい風景を表現。',\n            channel_id: '2',\n            sold: false\n        },\n        // 緑の大地農場のNFT\n        {\n            id: '8',\n            name: '大地の恵みNFT',\n            location: '北海道',\n            price: 65000,\n            rating: 4.9,\n            sales: 140,\n            image_url: 'https://api.dicebear.com/7.x/shapes/svg?seed=harvest1',\n            description: '広大な大地で育まれた作物の収穫風景。',\n            channel_id: '3',\n            sold: false\n        },\n        {\n            id: '9',\n            name: '北の大地の物語NFT',\n            location: '北海道',\n            price: 80000,\n            rating: 4.8,\n            sales: 95,\n            image_url: 'https://api.dicebear.com/7.x/shapes/svg?seed=story1',\n            description: '北海道の雄大な自然と農業の調和を表現。',\n            channel_id: '3',\n            sold: false\n        },\n        {\n            id: '10',\n            name: '雪解けの春NFT',\n            location: '北海道',\n            price: 58000,\n            rating: 4.7,\n            sales: 115,\n            image_url: 'https://api.dicebear.com/7.x/shapes/svg?seed=spring1',\n            description: '春を迎えた畑の目覚めを切り取った瞬間。',\n            channel_id: '3',\n            sold: false\n        }\n    ],\n    channels: [\n        {\n            id: '1',\n            name: '山田農園',\n            image_url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=yamada',\n            likes: 15000,\n            is_live: true,\n            description: '代々続く有機農法にこだわる農園です。新鮮な野菜とともに、農園の四季折々の風景をNFTとして提供しています。',\n            location: '長野県',\n            specialties: ['有機野菜', '果物', '山菜'],\n            farming_style: '有機農法',\n            established: '1950年'\n        },\n        {\n            id: '2',\n            name: '海辺の牧場',\n            image_url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=umibe',\n            likes: 12000,\n            is_live: false,\n            description: '潮風と緑豊かな環境で育つ牧場の動物たちの日常をNFTに。自然との共生を大切にしています。',\n            location: '千葉県',\n            specialties: ['乳製品', '放牧卵', '食肉'],\n            farming_style: '放牧式',\n            established: '1985年'\n        },\n        {\n            id: '3',\n            name: '緑の大地農場',\n            image_url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=midori',\n            likes: 18000,\n            is_live: true,\n            description: '北海道の広大な大地で、自然と共に歩む農業を実践。四季折々の風景と収穫の喜びをNFTに込めています。',\n            location: '北海道',\n            specialties: ['小麦', '大豆', 'じゃがいも'],\n            farming_style: '自然循環農法',\n            established: '1975年'\n        }\n    ]\n};\n\n// ローカルストレージの初期化\nexport function initializeStorage() {\n    Object.entries(STORAGE_KEYS).forEach(([key, value]) => {\n        if (!localStorage.getItem(value)) {\n            localStorage.setItem(value, JSON.stringify(initialData[value.toLowerCase()] || []));\n        }\n    });\n}\n\n// ユーザー認証\nexport async function signInWithPassword({ email, password }) {\n    const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n    const user = users.find(u => u.email === email && u.password === password);\n    \n    if (!user) {\n        throw new Error('Invalid login credentials');\n    }\n\n    localStorage.setItem('currentUser', JSON.stringify(user));\n    return { user };\n}\n\nexport async function signUp({ email, password, options }) {\n    const users = JSON.parse(localStorage.getItem(STORAGE_KEYS.USERS) || '[]');\n    \n    if (users.some(u => u.email === email)) {\n        throw new Error('User already registered');\n    }\n\n    const newUser = {\n        id: crypto.randomUUID(),\n        email,\n        password,\n        ...options?.data\n    };\n\n    users.push(newUser);\n    localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));\n\n    // プロフィールの作成\n    const profiles = JSON.parse(localStorage.getItem(STORAGE_KEYS.PROFILES) || '[]');\n    const newProfile = {\n        id: newUser.id,\n        email: newUser.email,\n        username: options?.data?.username || `User${newUser.id.substring(0, 8)}`,\n        points: 1000, // 初期ポイント\n        created_at: new Date().toISOString()\n    };\n    profiles.push(newProfile);\n    localStorage.setItem(STORAGE_KEYS.PROFILES, JSON.stringify(profiles));\n\n    return { user: newUser };\n}\n\nexport async function signOut() {\n    localStorage.removeItem('currentUser');\n}\n\n// ユーザー情報の取得\nexport async function getUser() {\n    const user = localStorage.getItem('currentUser');\n    return user ? { user: JSON.parse(user) } : { user: null };\n}\n\n// プロフィール関連\nexport async function getUserProfile() {\n    const { user } = await getUser();\n    if (!user) return null;\n\n    const profiles = JSON.parse(localStorage.getItem(STORAGE_KEYS.PROFILES) || '[]');\n    return profiles.find(p => p.id === user.id);\n}\n\nexport async function updateProfile(updates) {\n    const { user } = await getUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const profiles = JSON.parse(localStorage.getItem(STORAGE_KEYS.PROFILES) || '[]');\n    const profileIndex = profiles.findIndex(p => p.id === user.id);\n    \n    if (profileIndex === -1) throw new Error('Profile not found');\n\n    profiles[profileIndex] = {\n        ...profiles[profileIndex],\n        ...updates,\n        updated_at: new Date().toISOString()\n    };\n\n    localStorage.setItem(STORAGE_KEYS.PROFILES, JSON.stringify(profiles));\n    return profiles[profileIndex];\n}\n\n// 商品関連\nexport async function fetchProducts() {\n    const products = JSON.parse(localStorage.getItem(STORAGE_KEYS.PRODUCTS) || '[]');\n    const purchasedNfts = JSON.parse(localStorage.getItem(STORAGE_KEYS.PURCHASED_NFTS) || '[]');\n    \n    // 購入済みNFTの状態を反映\n    return products.map(product => ({\n        ...product,\n        sold: purchasedNfts.includes(product.id)\n    }));\n}\n\nexport async function searchProducts(searchTerm) {\n    const products = await fetchProducts();\n    return products.filter(p => \n        !p.sold && (\n            p.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            p.location.toLowerCase().includes(searchTerm.toLowerCase())\n        )\n    );\n}\n\nexport async function filterProducts({ sortBy, region }) {\n    let products = await fetchProducts();\n    \n    // 販売中のNFTのみをフィルタリング\n    products = products.filter(p => !p.sold);\n    \n    if (region) {\n        products = products.filter(p => p.location.toLowerCase().includes(region.toLowerCase()));\n    }\n\n    if (sortBy) {\n        switch (sortBy) {\n            case 'name':\n                products.sort((a, b) => a.name.localeCompare(b.name));\n                break;\n            case 'rating':\n                products.sort((a, b) => b.rating - a.rating);\n                break;\n            case 'price':\n                products.sort((a, b) => a.price - b.price);\n                break;\n        }\n    }\n\n    return products;\n}\n\n// チャンネル関連\nexport async function fetchChannels() {\n    return JSON.parse(localStorage.getItem(STORAGE_KEYS.CHANNELS) || '[]');\n}\n\nexport async function getChannelProducts(channelId) {\n    const products = await fetchProducts();\n    return products.filter(p => !p.sold && p.channel_id === channelId);\n}\n\n// NFT購入\nexport async function purchaseProduct(productId, paymentType) {\n    const { user } = await getUser();\n    if (!user) throw new Error('ユーザーが認証されていません。');\n\n    const products = await fetchProducts();\n    const product = products.find(p => p.id === productId);\n    if (!product) throw new Error('商品が見つかりません。');\n    if (product.sold) throw new Error('この商品は既に購入されています。');\n\n    // トランザクションの記録\n    const transactions = JSON.parse(localStorage.getItem(STORAGE_KEYS.TRANSACTIONS) || '[]');\n    transactions.push({\n        id: crypto.randomUUID(),\n        user_id: user.id,\n        type: paymentType,\n        amount: product.price,\n        description: `${product.name}の購入`,\n        created_at: new Date().toISOString()\n    });\n    localStorage.setItem(STORAGE_KEYS.TRANSACTIONS, JSON.stringify(transactions));\n\n    // NFTの記録\n    const userNfts = JSON.parse(localStorage.getItem(STORAGE_KEYS.USER_NFTS) || '[]');\n    userNfts.push({\n        id: crypto.randomUUID(),\n        user_id: user.id,\n        product_id: productId,\n        token_id: `NFT-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        purchased_at: new Date().toISOString(),\n        products: product\n    });\n    localStorage.setItem(STORAGE_KEYS.USER_NFTS, JSON.stringify(userNfts));\n\n    // 購入済みNFTの記録\n    const purchasedNfts = JSON.parse(localStorage.getItem(STORAGE_KEYS.PURCHASED_NFTS) || '[]');\n    purchasedNfts.push(productId);\n    localStorage.setItem(STORAGE_KEYS.PURCHASED_NFTS, JSON.stringify(purchasedNfts));\n\n    // ポイント決済の場合はポイントを減算\n    if (paymentType === 'point') {\n        const profiles = JSON.parse(localStorage.getItem(STORAGE_KEYS.PROFILES) || '[]');\n        const userProfile = profiles.find(p => p.id === user.id);\n        if (userProfile) {\n            userProfile.points -= product.price;\n            localStorage.setItem(STORAGE_KEYS.PROFILES, JSON.stringify(profiles));\n        }\n    }\n\n    return true;\n}\n\n// NFTの取得\nexport async function getUserNFTs() {\n    const { user } = await getUser();\n    if (!user) return [];\n\n    const userNfts = JSON.parse(localStorage.getItem(STORAGE_KEYS.USER_NFTS) || '[]');\n    return userNfts.filter(nft => nft.user_id === user.id);\n}\n\n// 取引履歴の取得\nexport async function getTransactions() {\n    const { user } = await getUser();\n    if (!user) return [];\n\n    const transactions = JSON.parse(localStorage.getItem(STORAGE_KEYS.TRANSACTIONS) || '[]');\n    return transactions.filter(tx => tx.user_id === user.id);\n}","import { getUser, signOut } from '../../services/local-storage.js';\n\nexport async function checkAuth() {\n    const { user } = await getUser();\n    return user;\n}\n\nexport async function requireAuth() {\n    const user = await checkAuth();\n    if (!user) {\n        window.location.href = '/src/pages/auth.html';\n        return null;\n    }\n    return user;\n}\n\nexport async function handleSignOut() {\n    await signOut();\n    window.location.href = '/src/pages/auth.html';\n}\n\nexport { signOut };","// 現在のページのパスを取得\nfunction getCurrentPath() {\n    return window.location.pathname;\n}\n\n// ナビゲーションの更新\nexport function updateNavigation() {\n    const currentPath = getCurrentPath();\n    const navItems = document.querySelectorAll('.nav-item');\n    \n    navItems.forEach(item => {\n        const href = item.getAttribute('href');\n        if (href === currentPath || (href === '/' && currentPath === '/index.html')) {\n            item.classList.add('active');\n        } else {\n            item.classList.remove('active');\n        }\n    });\n}\n\n// ナビゲーションのクリックイベント\nexport function setupNavigation() {\n    const navItems = document.querySelectorAll('.nav-item');\n    navItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n            const href = item.getAttribute('href');\n            if (href === getCurrentPath()) {\n                e.preventDefault(); // 同じページの場合は遷移をキャンセル\n            }\n        });\n    });\n}","\n        import { checkAuth, handleSignOut } from '/src/js/auth/auth-check.js';\n        import { setupNavigation, updateNavigation } from '/src/js/utils/navigation.js';\n\n        async function init() {\n            try {\n                const user = await checkAuth();\n                const authButton = document.getElementById('authButton');\n                \n                if (user) {\n                    authButton.textContent = 'ログアウト';\n                    authButton.addEventListener('click', handleSignOut);\n                } else {\n                    authButton.textContent = 'ログイン';\n                    authButton.addEventListener('click', () => {\n                        window.location.href = '/auth.html';\n                    });\n                }\n\n                setupNavigation();\n                updateNavigation();\n            } catch (error) {\n                console.error('Initialization error:', error);\n            }\n        }\n\n        init();\n    ","document.addEventListener('DOMContentLoaded', () => {\n    // タブ切り替え機能\n    const tabs = document.querySelectorAll('.tab-btn');\n    const contents = document.querySelectorAll('.tab-content');\n\n    tabs.forEach(tab => {\n        tab.addEventListener('click', () => {\n            // アクティブなタブのクラスを削除\n            tabs.forEach(t => t.classList.remove('active'));\n            contents.forEach(c => c.classList.remove('active'));\n\n            // クリックされたタブをアクティブに\n            tab.classList.add('active');\n            const tabId = tab.getAttribute('data-tab');\n            document.getElementById(tabId).classList.add('active');\n        });\n    });\n});"],"names":["signOut","getUser","user","checkAuth","handleSignOut","getCurrentPath","updateNavigation","currentPath","item","href","setupNavigation","e","init","authButton","error","tabs","contents","tab","t","c","tabId"],"mappings":"ssBAwOO,eAAeA,GAAU,CAC5B,aAAa,WAAW,aAAa,CACzC,CAGO,eAAeC,GAAU,CAC5B,MAAMC,EAAO,aAAa,QAAQ,aAAa,EAC/C,OAAOA,EAAO,CAAE,KAAM,KAAK,MAAMA,CAAI,CAAG,EAAG,CAAE,KAAM,IAAM,CAC7D,CC9OO,eAAeC,GAAY,CAC9B,KAAM,CAAE,KAAAD,GAAS,MAAMD,EAAS,EAChC,OAAOC,CACX,CAWO,eAAeE,GAAgB,CAClC,MAAMJ,EAAS,EACf,OAAO,SAAS,KAAO,sBAC3B,CClBA,SAASK,GAAiB,CACtB,OAAO,OAAO,SAAS,QAC3B,CAGO,SAASC,GAAmB,CAC/B,MAAMC,EAAcF,EAAgB,EACnB,SAAS,iBAAiB,WAAW,EAE7C,QAAQG,GAAQ,CACrB,MAAMC,EAAOD,EAAK,aAAa,MAAM,EACjCC,IAASF,GAAgBE,IAAS,KAAOF,IAAgB,cACzDC,EAAK,UAAU,IAAI,QAAQ,EAE3BA,EAAK,UAAU,OAAO,QAAQ,CAE1C,CAAK,CACL,CAGO,SAASE,GAAkB,CACb,SAAS,iBAAiB,WAAW,EAC7C,QAAQF,GAAQ,CACrBA,EAAK,iBAAiB,QAAUG,GAAM,CACrBH,EAAK,aAAa,MAAM,IACxBH,KACTM,EAAE,eAAc,CAEhC,CAAS,CACT,CAAK,CACL,CC3BQ,eAAeC,GAAO,CAClB,GAAI,CACA,MAAMV,EAAO,MAAMC,EAAW,EACxBU,EAAa,SAAS,eAAe,YAAY,EAEnDX,GACAW,EAAW,YAAc,QACzBA,EAAW,iBAAiB,QAAST,CAAa,IAElDS,EAAW,YAAc,OACzBA,EAAW,iBAAiB,QAAS,IAAM,CACvC,OAAO,SAAS,KAAO,YAC/C,CAAqB,GAGLH,EAAiB,EACjBJ,EAAkB,CACrB,OAAQQ,EAAO,CACZ,QAAQ,MAAM,wBAAyBA,CAAK,CAC5D,CACA,CAEQF,EAAM,EC1Bd,SAAS,iBAAiB,mBAAoB,IAAM,CAEhD,MAAMG,EAAO,SAAS,iBAAiB,UAAU,EAC3CC,EAAW,SAAS,iBAAiB,cAAc,EAEzDD,EAAK,QAAQE,GAAO,CAChBA,EAAI,iBAAiB,QAAS,IAAM,CAEhCF,EAAK,QAAQG,GAAKA,EAAE,UAAU,OAAO,QAAQ,CAAC,EAC9CF,EAAS,QAAQG,GAAKA,EAAE,UAAU,OAAO,QAAQ,CAAC,EAGlDF,EAAI,UAAU,IAAI,QAAQ,EAC1B,MAAMG,EAAQH,EAAI,aAAa,UAAU,EACzC,SAAS,eAAeG,CAAK,EAAE,UAAU,IAAI,QAAQ,CACjE,CAAS,CACT,CAAK,CACL,CAAC"}